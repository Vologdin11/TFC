// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/andrey/projects/go-marathon-team-3/pkg/tfsmetrics/store/store.go

// Package mock_store is a generated GoMock package.
package mock

import (
	repointerface "go-marathon-team-3/pkg/tfsmetrics/repointerface"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// FindOne mocks base method.
func (m *MockStore) FindOne(id int, projectName string) (*repointerface.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id, projectName)
	ret0, _ := ret[0].(*repointerface.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockStoreMockRecorder) FindOne(id, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockStore)(nil).FindOne), id, projectName)
}

// InitProject mocks base method.
func (m *MockStore) InitProject(projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitProject", projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitProject indicates an expected call of InitProject.
func (mr *MockStoreMockRecorder) InitProject(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitProject", reflect.TypeOf((*MockStore)(nil).InitProject), projectName)
}

// Write mocks base method.
func (m *MockStore) Write(commit *repointerface.Commit, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", commit, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStoreMockRecorder) Write(commit, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStore)(nil).Write), commit, projectName)
}

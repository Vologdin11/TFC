// Code generated by MockGen. DO NOT EDIT.
// Source: go/pkg/mod/github.com/microsoft/azure-devops-go-api/azuredevops@v1.0.0-b5/tfvc/client.go

// Package mock_tfvc is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/microsoft/azure-devops-go-api/azuredevops/git"
	tfvc "github.com/microsoft/azure-devops-go-api/azuredevops/tfvc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateChangeset mocks base method.
func (m *MockClient) CreateChangeset(arg0 context.Context, arg1 tfvc.CreateChangesetArgs) (*git.TfvcChangesetRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChangeset", arg0, arg1)
	ret0, _ := ret[0].(*git.TfvcChangesetRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChangeset indicates an expected call of CreateChangeset.
func (mr *MockClientMockRecorder) CreateChangeset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChangeset", reflect.TypeOf((*MockClient)(nil).CreateChangeset), arg0, arg1)
}

// GetBatchedChangesets mocks base method.
func (m *MockClient) GetBatchedChangesets(arg0 context.Context, arg1 tfvc.GetBatchedChangesetsArgs) (*[]git.TfvcChangesetRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchedChangesets", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcChangesetRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchedChangesets indicates an expected call of GetBatchedChangesets.
func (mr *MockClientMockRecorder) GetBatchedChangesets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchedChangesets", reflect.TypeOf((*MockClient)(nil).GetBatchedChangesets), arg0, arg1)
}

// GetBranch mocks base method.
func (m *MockClient) GetBranch(arg0 context.Context, arg1 tfvc.GetBranchArgs) (*git.TfvcBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1)
	ret0, _ := ret[0].(*git.TfvcBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockClientMockRecorder) GetBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockClient)(nil).GetBranch), arg0, arg1)
}

// GetBranchRefs mocks base method.
func (m *MockClient) GetBranchRefs(arg0 context.Context, arg1 tfvc.GetBranchRefsArgs) (*[]git.TfvcBranchRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchRefs", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcBranchRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchRefs indicates an expected call of GetBranchRefs.
func (mr *MockClientMockRecorder) GetBranchRefs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchRefs", reflect.TypeOf((*MockClient)(nil).GetBranchRefs), arg0, arg1)
}

// GetBranches mocks base method.
func (m *MockClient) GetBranches(arg0 context.Context, arg1 tfvc.GetBranchesArgs) (*[]git.TfvcBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches.
func (mr *MockClientMockRecorder) GetBranches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockClient)(nil).GetBranches), arg0, arg1)
}

// GetChangeset mocks base method.
func (m *MockClient) GetChangeset(arg0 context.Context, arg1 tfvc.GetChangesetArgs) (*git.TfvcChangeset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeset", arg0, arg1)
	ret0, _ := ret[0].(*git.TfvcChangeset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeset indicates an expected call of GetChangeset.
func (mr *MockClientMockRecorder) GetChangeset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeset", reflect.TypeOf((*MockClient)(nil).GetChangeset), arg0, arg1)
}

// GetChangesetChanges mocks base method.
func (m *MockClient) GetChangesetChanges(arg0 context.Context, arg1 tfvc.GetChangesetChangesArgs) (*tfvc.GetChangesetChangesResponseValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangesetChanges", arg0, arg1)
	ret0, _ := ret[0].(*tfvc.GetChangesetChangesResponseValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangesetChanges indicates an expected call of GetChangesetChanges.
func (mr *MockClientMockRecorder) GetChangesetChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangesetChanges", reflect.TypeOf((*MockClient)(nil).GetChangesetChanges), arg0, arg1)
}

// GetChangesetWorkItems mocks base method.
func (m *MockClient) GetChangesetWorkItems(arg0 context.Context, arg1 tfvc.GetChangesetWorkItemsArgs) (*[]git.AssociatedWorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangesetWorkItems", arg0, arg1)
	ret0, _ := ret[0].(*[]git.AssociatedWorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangesetWorkItems indicates an expected call of GetChangesetWorkItems.
func (mr *MockClientMockRecorder) GetChangesetWorkItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangesetWorkItems", reflect.TypeOf((*MockClient)(nil).GetChangesetWorkItems), arg0, arg1)
}

// GetChangesets mocks base method.
func (m *MockClient) GetChangesets(arg0 context.Context, arg1 tfvc.GetChangesetsArgs) (*[]git.TfvcChangesetRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangesets", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcChangesetRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangesets indicates an expected call of GetChangesets.
func (mr *MockClientMockRecorder) GetChangesets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangesets", reflect.TypeOf((*MockClient)(nil).GetChangesets), arg0, arg1)
}

// GetItem mocks base method.
func (m *MockClient) GetItem(arg0 context.Context, arg1 tfvc.GetItemArgs) (*git.TfvcItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(*git.TfvcItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockClientMockRecorder) GetItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockClient)(nil).GetItem), arg0, arg1)
}

// GetItemContent mocks base method.
func (m *MockClient) GetItemContent(arg0 context.Context, arg1 tfvc.GetItemContentArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemContent", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemContent indicates an expected call of GetItemContent.
func (mr *MockClientMockRecorder) GetItemContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemContent", reflect.TypeOf((*MockClient)(nil).GetItemContent), arg0, arg1)
}

// GetItemText mocks base method.
func (m *MockClient) GetItemText(arg0 context.Context, arg1 tfvc.GetItemTextArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemText", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemText indicates an expected call of GetItemText.
func (mr *MockClientMockRecorder) GetItemText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemText", reflect.TypeOf((*MockClient)(nil).GetItemText), arg0, arg1)
}

// GetItemZip mocks base method.
func (m *MockClient) GetItemZip(arg0 context.Context, arg1 tfvc.GetItemZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemZip indicates an expected call of GetItemZip.
func (mr *MockClientMockRecorder) GetItemZip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemZip", reflect.TypeOf((*MockClient)(nil).GetItemZip), arg0, arg1)
}

// GetItems mocks base method.
func (m *MockClient) GetItems(arg0 context.Context, arg1 tfvc.GetItemsArgs) (*[]git.TfvcItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockClientMockRecorder) GetItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockClient)(nil).GetItems), arg0, arg1)
}

// GetItemsBatch mocks base method.
func (m *MockClient) GetItemsBatch(arg0 context.Context, arg1 tfvc.GetItemsBatchArgs) (*[][]git.TfvcItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsBatch", arg0, arg1)
	ret0, _ := ret[0].(*[][]git.TfvcItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsBatch indicates an expected call of GetItemsBatch.
func (mr *MockClientMockRecorder) GetItemsBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsBatch", reflect.TypeOf((*MockClient)(nil).GetItemsBatch), arg0, arg1)
}

// GetItemsBatchZip mocks base method.
func (m *MockClient) GetItemsBatchZip(arg0 context.Context, arg1 tfvc.GetItemsBatchZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsBatchZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsBatchZip indicates an expected call of GetItemsBatchZip.
func (mr *MockClientMockRecorder) GetItemsBatchZip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsBatchZip", reflect.TypeOf((*MockClient)(nil).GetItemsBatchZip), arg0, arg1)
}

// GetLabel mocks base method.
func (m *MockClient) GetLabel(arg0 context.Context, arg1 tfvc.GetLabelArgs) (*git.TfvcLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", arg0, arg1)
	ret0, _ := ret[0].(*git.TfvcLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockClientMockRecorder) GetLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockClient)(nil).GetLabel), arg0, arg1)
}

// GetLabelItems mocks base method.
func (m *MockClient) GetLabelItems(arg0 context.Context, arg1 tfvc.GetLabelItemsArgs) (*[]git.TfvcItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelItems", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelItems indicates an expected call of GetLabelItems.
func (mr *MockClientMockRecorder) GetLabelItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelItems", reflect.TypeOf((*MockClient)(nil).GetLabelItems), arg0, arg1)
}

// GetLabels mocks base method.
func (m *MockClient) GetLabels(arg0 context.Context, arg1 tfvc.GetLabelsArgs) (*[]git.TfvcLabelRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcLabelRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockClientMockRecorder) GetLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockClient)(nil).GetLabels), arg0, arg1)
}

// GetShelveset mocks base method.
func (m *MockClient) GetShelveset(arg0 context.Context, arg1 tfvc.GetShelvesetArgs) (*git.TfvcShelveset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelveset", arg0, arg1)
	ret0, _ := ret[0].(*git.TfvcShelveset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelveset indicates an expected call of GetShelveset.
func (mr *MockClientMockRecorder) GetShelveset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelveset", reflect.TypeOf((*MockClient)(nil).GetShelveset), arg0, arg1)
}

// GetShelvesetChanges mocks base method.
func (m *MockClient) GetShelvesetChanges(arg0 context.Context, arg1 tfvc.GetShelvesetChangesArgs) (*[]git.TfvcChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelvesetChanges", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelvesetChanges indicates an expected call of GetShelvesetChanges.
func (mr *MockClientMockRecorder) GetShelvesetChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelvesetChanges", reflect.TypeOf((*MockClient)(nil).GetShelvesetChanges), arg0, arg1)
}

// GetShelvesetWorkItems mocks base method.
func (m *MockClient) GetShelvesetWorkItems(arg0 context.Context, arg1 tfvc.GetShelvesetWorkItemsArgs) (*[]git.AssociatedWorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelvesetWorkItems", arg0, arg1)
	ret0, _ := ret[0].(*[]git.AssociatedWorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelvesetWorkItems indicates an expected call of GetShelvesetWorkItems.
func (mr *MockClientMockRecorder) GetShelvesetWorkItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelvesetWorkItems", reflect.TypeOf((*MockClient)(nil).GetShelvesetWorkItems), arg0, arg1)
}

// GetShelvesets mocks base method.
func (m *MockClient) GetShelvesets(arg0 context.Context, arg1 tfvc.GetShelvesetsArgs) (*[]git.TfvcShelvesetRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelvesets", arg0, arg1)
	ret0, _ := ret[0].(*[]git.TfvcShelvesetRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelvesets indicates an expected call of GetShelvesets.
func (mr *MockClientMockRecorder) GetShelvesets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelvesets", reflect.TypeOf((*MockClient)(nil).GetShelvesets), arg0, arg1)
}
